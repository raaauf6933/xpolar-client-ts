/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  mutation ImportCases($input: importCasesInput!, $file: Upload) {\n    importCases(input: $input, file: $file) {\n      errors {\n        message\n        field\n      }\n      caseBatch {\n        id\n        client {\n          updatedAt\n          status\n          name\n          id\n          createdAt\n        }\n        isDeleted\n        batchId\n        batchReference\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.ImportCasesDocument,
    "\n  query CaseBatches(\n    $page: Int!\n    $limit: Int!\n    $sortBy: CaseBatchesSortingInput\n  ) {\n    caseBatches(page: $page, limit: $limit, sortBy: $sortBy) {\n      totalCount\n      pageInfo {\n        next {\n          page\n          limit\n        }\n        previous {\n          limit\n          page\n        }\n        showing {\n          from\n          to\n        }\n      }\n      count\n      edges {\n        node {\n          id\n          client {\n            id\n            name\n            status\n            createdAt\n            updatedAt\n          }\n          batchId\n          batchReference\n          assignmentStartDate\n          assignmentEndDate\n          status\n          isDeleted\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.CaseBatchesDocument,
    "\n  query Cases(\n    $page: Int!\n    $limit: Int!\n    $sortBy: CasesSortingInput\n    $filter: CasesFilterInput\n  ) {\n    cases(page: $page, limit: $limit, sortBy: $sortBy, filter: $filter) {\n      totalCount\n      pageInfo {\n        previous {\n          limit\n          page\n        }\n        next {\n          page\n          limit\n        }\n        showing {\n          from\n          to\n        }\n      }\n      edges {\n        node {\n          id\n          caseUniqueBatchId\n          caseReference\n          clientReference\n          caseBatch {\n            status\n            id\n            assignmentEndDate\n            assignmentStartDate\n            createdAt\n            client {\n              id\n              code\n              name\n            }\n          }\n          person {\n            id\n            firstName\n            lastName\n          }\n        }\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n": types.CasesDocument,
    "\n  query Case($id: ID!) {\n    case(id: $id) {\n      id\n      clientReference\n      createdAt\n      caseUniqueBatchId\n      caseReference\n      caseBatch {\n        id\n        status\n        createdAt\n        updatedAt\n        batchReference\n        batchId\n        assignmentStartDate\n        assignmentEndDate\n        client {\n          code\n          name\n          status\n          id\n          createdAt\n          updatedAt\n        }\n      }\n      person {\n        gender\n        firstName\n        createdAt\n        contacs {\n          contactValue\n          createdAt\n          id\n        }\n        lastName\n        birthDay\n        updatedAt\n        id\n        address {\n          zipCode\n          updatedAt\n          id\n          address\n          city\n          region\n          createdAt\n        }\n      }\n    }\n  }\n": types.CaseDocument,
    "\n  mutation CreateClient($input: createClientInput!) {\n    createClient(input: $input) {\n      client {\n        createdAt\n        name\n        id\n        status\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n": types.CreateClientDocument,
    "\n  query Clients($page: Int!, $limit: Int!) {\n    clients(page: $page, limit: $limit) {\n      edges {\n        node {\n          status\n          updatedAt\n          code\n          name\n          id\n          createdAt\n        }\n      }\n      count\n      totalCount\n      pageInfo {\n        next {\n          limit\n          page\n        }\n        previous {\n          limit\n          page\n        }\n        showing {\n          from\n          to\n        }\n      }\n    }\n  }\n": types.ClientsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ImportCases($input: importCasesInput!, $file: Upload) {\n    importCases(input: $input, file: $file) {\n      errors {\n        message\n        field\n      }\n      caseBatch {\n        id\n        client {\n          updatedAt\n          status\n          name\n          id\n          createdAt\n        }\n        isDeleted\n        batchId\n        batchReference\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ImportCases($input: importCasesInput!, $file: Upload) {\n    importCases(input: $input, file: $file) {\n      errors {\n        message\n        field\n      }\n      caseBatch {\n        id\n        client {\n          updatedAt\n          status\n          name\n          id\n          createdAt\n        }\n        isDeleted\n        batchId\n        batchReference\n        status\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CaseBatches(\n    $page: Int!\n    $limit: Int!\n    $sortBy: CaseBatchesSortingInput\n  ) {\n    caseBatches(page: $page, limit: $limit, sortBy: $sortBy) {\n      totalCount\n      pageInfo {\n        next {\n          page\n          limit\n        }\n        previous {\n          limit\n          page\n        }\n        showing {\n          from\n          to\n        }\n      }\n      count\n      edges {\n        node {\n          id\n          client {\n            id\n            name\n            status\n            createdAt\n            updatedAt\n          }\n          batchId\n          batchReference\n          assignmentStartDate\n          assignmentEndDate\n          status\n          isDeleted\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CaseBatches(\n    $page: Int!\n    $limit: Int!\n    $sortBy: CaseBatchesSortingInput\n  ) {\n    caseBatches(page: $page, limit: $limit, sortBy: $sortBy) {\n      totalCount\n      pageInfo {\n        next {\n          page\n          limit\n        }\n        previous {\n          limit\n          page\n        }\n        showing {\n          from\n          to\n        }\n      }\n      count\n      edges {\n        node {\n          id\n          client {\n            id\n            name\n            status\n            createdAt\n            updatedAt\n          }\n          batchId\n          batchReference\n          assignmentStartDate\n          assignmentEndDate\n          status\n          isDeleted\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Cases(\n    $page: Int!\n    $limit: Int!\n    $sortBy: CasesSortingInput\n    $filter: CasesFilterInput\n  ) {\n    cases(page: $page, limit: $limit, sortBy: $sortBy, filter: $filter) {\n      totalCount\n      pageInfo {\n        previous {\n          limit\n          page\n        }\n        next {\n          page\n          limit\n        }\n        showing {\n          from\n          to\n        }\n      }\n      edges {\n        node {\n          id\n          caseUniqueBatchId\n          caseReference\n          clientReference\n          caseBatch {\n            status\n            id\n            assignmentEndDate\n            assignmentStartDate\n            createdAt\n            client {\n              id\n              code\n              name\n            }\n          }\n          person {\n            id\n            firstName\n            lastName\n          }\n        }\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  query Cases(\n    $page: Int!\n    $limit: Int!\n    $sortBy: CasesSortingInput\n    $filter: CasesFilterInput\n  ) {\n    cases(page: $page, limit: $limit, sortBy: $sortBy, filter: $filter) {\n      totalCount\n      pageInfo {\n        previous {\n          limit\n          page\n        }\n        next {\n          page\n          limit\n        }\n        showing {\n          from\n          to\n        }\n      }\n      edges {\n        node {\n          id\n          caseUniqueBatchId\n          caseReference\n          clientReference\n          caseBatch {\n            status\n            id\n            assignmentEndDate\n            assignmentStartDate\n            createdAt\n            client {\n              id\n              code\n              name\n            }\n          }\n          person {\n            id\n            firstName\n            lastName\n          }\n        }\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Case($id: ID!) {\n    case(id: $id) {\n      id\n      clientReference\n      createdAt\n      caseUniqueBatchId\n      caseReference\n      caseBatch {\n        id\n        status\n        createdAt\n        updatedAt\n        batchReference\n        batchId\n        assignmentStartDate\n        assignmentEndDate\n        client {\n          code\n          name\n          status\n          id\n          createdAt\n          updatedAt\n        }\n      }\n      person {\n        gender\n        firstName\n        createdAt\n        contacs {\n          contactValue\n          createdAt\n          id\n        }\n        lastName\n        birthDay\n        updatedAt\n        id\n        address {\n          zipCode\n          updatedAt\n          id\n          address\n          city\n          region\n          createdAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Case($id: ID!) {\n    case(id: $id) {\n      id\n      clientReference\n      createdAt\n      caseUniqueBatchId\n      caseReference\n      caseBatch {\n        id\n        status\n        createdAt\n        updatedAt\n        batchReference\n        batchId\n        assignmentStartDate\n        assignmentEndDate\n        client {\n          code\n          name\n          status\n          id\n          createdAt\n          updatedAt\n        }\n      }\n      person {\n        gender\n        firstName\n        createdAt\n        contacs {\n          contactValue\n          createdAt\n          id\n        }\n        lastName\n        birthDay\n        updatedAt\n        id\n        address {\n          zipCode\n          updatedAt\n          id\n          address\n          city\n          region\n          createdAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateClient($input: createClientInput!) {\n    createClient(input: $input) {\n      client {\n        createdAt\n        name\n        id\n        status\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateClient($input: createClientInput!) {\n    createClient(input: $input) {\n      client {\n        createdAt\n        name\n        id\n        status\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Clients($page: Int!, $limit: Int!) {\n    clients(page: $page, limit: $limit) {\n      edges {\n        node {\n          status\n          updatedAt\n          code\n          name\n          id\n          createdAt\n        }\n      }\n      count\n      totalCount\n      pageInfo {\n        next {\n          limit\n          page\n        }\n        previous {\n          limit\n          page\n        }\n        showing {\n          from\n          to\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Clients($page: Int!, $limit: Int!) {\n    clients(page: $page, limit: $limit) {\n      edges {\n        node {\n          status\n          updatedAt\n          code\n          name\n          id\n          createdAt\n        }\n      }\n      count\n      totalCount\n      pageInfo {\n        next {\n          limit\n          page\n        }\n        previous {\n          limit\n          page\n        }\n        showing {\n          from\n          to\n        }\n      }\n    }\n  }\n"];

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
**/
export function graphql(source: string): unknown;

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;